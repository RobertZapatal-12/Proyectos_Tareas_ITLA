# -*- coding: utf-8 -*-
"""analisis de nomina .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mV7N01LmOJP4xV0EJhJ2iz8pvEH3iNRB

## Analisis sobre nominas de organizaciones publicas

*Importaciones*
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_MISPAS = pd.read_excel('MISPAS.xlsx')
df_MAP = pd.read_excel('MAP.xlsx')
df_DGJP = pd.read_excel('DGJP.xlsx')
df_ONE = pd.read_excel('ONE.xlsx')
df_MINERD = pd.read_excel('MINERD.xlsx')

df_DGJP

df_MINERD

df_MAP

df_MISPAS

df_ONE

"""## **Concordancia y concatenacion**"""

def estandarizar_columnas(df, fuente):
    df = df.copy()

    if 'NOMBRE Y APELLIDO' in df.columns:
        df['Nombre'] = df['NOMBRE Y APELLIDO']
    elif 'Nombre' in df.columns and 'Apellido' in df.columns:
        df['Nombre'] = df['Nombre'] + ' ' + df['Apellido']

    renombrar = {
        'NO': 'No',
        'GENERO': 'Genero',
        'SALARIO': 'Sueldo',
        'SUELDO NETO': 'Ingreso Neto',
        'Sueldo Bruto': 'Sueldo',
        'Otros Desc.': 'Otros Descuentos',
        'Total Desc.': 'Total Descuentos',
        'Neto': 'Ingreso Neto',
    }
    df = df.rename(columns=renombrar)

    columnas_comunes = ['Nombre', 'Cargo', 'Departamento', 'Estatus', 'Genero',
                        'Sueldo', 'AFP', 'ISR', 'SFS', 'Otros Descuentos', 'Ingreso Neto']

    for col in columnas_comunes:
        if col not in df.columns:
            df[col] = None

    df = df[columnas_comunes]
    df['Fuente'] = fuente
    return df
df1 = estandarizar_columnas(df_MAP, "Organizacion Pública")
df2 = estandarizar_columnas(df_DGJP, "Jubilados")
df3 = estandarizar_columnas(df_MINERD, "Ministerio de Educación")
df4 = estandarizar_columnas(df_ONE, "Oficina de Estadística")
df5 = estandarizar_columnas(df_MISPAS, "Ministerio de Salud Pública")

def eliminar_columnas_duplicadas(df):
    return df.loc[:, ~df.columns.duplicated()]
df1 = eliminar_columnas_duplicadas(estandarizar_columnas(df_MAP, "Organizacion Pública"))
df2 = eliminar_columnas_duplicadas(estandarizar_columnas(df_DGJP, "Jubilados"))
df3 = eliminar_columnas_duplicadas(estandarizar_columnas(df_MINERD, "Educación"))
df4 = eliminar_columnas_duplicadas(estandarizar_columnas(df_ONE, "Oficina de Estadística"))
df5 = eliminar_columnas_duplicadas(estandarizar_columnas(df_MISPAS, "Ministerio de Salud Pública"))
df_concatenado = pd.concat([df1, df2, df3, df4, df5], ignore_index=True)
generos_validos = ['FEMENINO', 'MASCULINO']
df_concatenado = df_concatenado[df_concatenado['Genero'].str.upper().isin(generos_validos)]
df_concatenado.to_excel("concatenaciondenominas.xlsx", index=False)

"""ELIMINACION DE DUPLICADOS O NULOS LUEGO DE LA CONCATENACION"""

df_concatenado.isnull().sum()

# Columnas de texto
columnas_texto = ['Nombre', 'Cargo', 'Departamento', 'Estatus', 'Genero']

# Columnas numéricas
columnas_numericas = ['Sueldo', 'AFP', 'ISR', 'SFS', 'Otros Descuentos', 'Ingreso Neto']

# Reemplazar nulos por "N/A" en texto
df_concatenado[columnas_texto] = df_concatenado[columnas_texto].fillna("N/A")

# Reemplazar nulos por 0 en columnas numéricas
df_concatenado[columnas_numericas] = df_concatenado[columnas_numericas].fillna(0)

df_concatenado.isnull().sum()

duplicados = df_concatenado.duplicated().sum()
print(f"\nFilas duplicadas: {duplicados}")

df_concatenado.head(800)

"""Analisis Estadistico"""

# Verifica el valor exacto
df_concatenado[df_concatenado['Sueldo'] > 1000000]

# Reemplazarlo manualmente con un valor realista
df_concatenado.loc[df_concatenado['Sueldo'] > 1000000, 'Sueldo'] = 154381.67

df_concatenado[df_concatenado['Sueldo'] < 10000].sort_values('Sueldo')
df_concatenado.loc[df_concatenado['Sueldo'] < 10000, 'Sueldo'] = 15000  # o lo que estimes correcto

resumen = df_concatenado.groupby("Fuente")['Sueldo'].agg(['count', 'mean', 'min', 'max', 'sum'])
resumen_redondeado = resumen.round(2)

df_concatenado.groupby("Fuente")['Sueldo'].agg(['count', 'mean', 'min', 'max', 'sum'])
resumen_redondeado.style.format("{:,.2f}")

"""**Hallazgos**"""

numericas = ['Sueldo', 'AFP', 'ISR', 'SFS', 'Otros Descuentos', 'Ingreso Neto']

# Distribución del Ingreso por Género
plt.figure(figsize=(10, 6))
sns.kdeplot(data=df_concatenado, x='Ingreso Neto', hue='Genero', fill=True)
plt.title('Distribución del Ingreso Neto por Género')
plt.xlabel('Ingreso Neto (RD$)')
plt.ylabel('Densidad')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

genero = df_concatenado['Genero'].value_counts()

plt.figure(figsize=(6,4))
plt.bar(genero.index, genero.values, color='purple')
plt.title('Distribución por Género')
plt.xlabel('Género')
plt.ylabel('Cantidad')
plt.grid(axis='y')
plt.show()

# Mapa de correlacion entre variables economicas
plt.figure(figsize=(10, 6))
corr = df_concatenado[numericas].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Mapa de Correlación entre Variables Económicas')
plt.tight_layout()
plt.show()

# Contar empleados por institución
empleados = df_concatenado["Fuente"].value_counts()

# Gráfico de barras
plt.figure(figsize=(9,6))
empleados.plot(kind="bar", color="skyblue", edgecolor="black")

# Títulos y etiquetas
plt.title("Comparación de empleados por institución", fontsize=14)
plt.xlabel("Institución", fontsize=12)
plt.ylabel("Cantidad de empleados", fontsize=12)
plt.xticks(rotation=45, ha="right")

# Mostrar valores encima de cada barra
for i, v in enumerate(empleados.values):
    plt.text(i, v + 5, str(v), ha="center", fontsize=10)

plt.tight_layout()
plt.show()

df_concatenado['Salario'] = pd.to_numeric(df_concatenado['Sueldo'], errors='coerce')

# Agrupar por institución y sumar salarios
gasto_total = df_concatenado.groupby("Fuente")["Sueldo"].sum().sort_values(ascending=False)

# Crear gráfico de barras
plt.figure(figsize=(10,6))
gasto_total.plot(kind="bar", color="skyblue", edgecolor="black")

# Títulos y etiquetas
plt.title("Gasto Total en Nómina por Institución", fontsize=14)
plt.xlabel("Institución", fontsize=12)
plt.ylabel("Gasto Total (RD$)", fontsize=12)
plt.xticks(rotation=45, ha="right")

# Mostrar valores encima de cada barra
for i, v in enumerate(gasto_total.values):
    plt.text(i, v + 1000, f"{v:,.0f}", ha="center", fontsize=10)  # Ajusta +1000 según magnitud

plt.tight_layout()
plt.show()

print(df_concatenado.columns)