# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vg2X_6KwNKaImUCItpvp9veirbEA0YcY
"""

import numpy as np

#Ejercicio 6
#Simula el lanzamiento de una moneda trucada (70% cara) 100 veces. Calcula la probabilidad posterior de que la moneda sea trucada si obtienes 70 caras.
np.random.seed(0)
lanzamientos = np.random.choice(['cara', 'cruz'], size=100, p=[0.7, 0.3])
caras_obtenidas = np.sum(lanzamientos == 'cara')
print("Caras obtenidas:", caras_obtenidas)



def bayes(p_dado_h, p_h, p_d):
    return (p_dado_h * p_h) / p_d


from scipy.stats import binom

p_dado_h1 = binom.pmf(70, 100, 0.7)
p_dado_h0 = binom.pmf(70, 100, 0.5)


p_d = p_dado_h1 * 0.5 + p_dado_h0 * 0.5


posterior_h1 = bayes(p_dado_h1, 0.5, p_d)
print("Probabilidad posterior de que la moneda sea trucada:", posterior_h1)

#Ejercicio 8
#Implementa en Python el ejemplo de la enfermedad rara. Usa una función para calcular P(H∣D) dadas diferentes tasas de falsos positivos.
def prob_enfermedad_dado_positivo(p_enfermedad=0.001, p_positivo_si_enfermo=0.99, p_positivo_si_sano=0.05):
    p_positivo = p_positivo_si_enfermo * p_enfermedad + p_positivo_si_sano * (1 - p_enfermedad)
    return (p_positivo_si_enfermo * p_enfermedad) / p_positivo

# Probar con distintas tasas de falsos positivos
for tasa_fp in [0.01, 0.05, 0.1, 0.2]:
    p = prob_enfermedad_dado_positivo(p_positivo_si_sano=tasa_fp)
    print(f"Tasa FP: {tasa_fp:.2f} -> P(enfermedad|positivo): {p:.4f}")

